package org.puremvc.as3.utilities.routes {	import org.puremvc.as3.patterns.observer.Notification;	/**	 * Notification sent from the RouteMachine. 	 * 	 * @author Robert Sk√∂ld, robert(at)publicclass.se	 */	public class RouteNotification extends Notification {				private var _currentLocation : String;		private var _currentRoute : Route;		private var _nextLocation : String;		private var _nextRoute : Route;		private var _fromData : Object = null;		private var _toData : Object = null;		public function RouteNotification( name : String , currentRoute : Route , currentLocation : String , nextRoute : Route , nextLocation : String , nextData : Object ) {			super( name );			_currentRoute = currentRoute;			_currentLocation = currentLocation;			_nextRoute = nextRoute;			_nextLocation = nextLocation;			_toData = nextData;		}				/**		 * The route that was before the GOTO call.		 * 		 * First time a route is changed this will be null.		 * 		 * NOTE If it's RouteMachine.CHANGED the toRoute		 * 		and fromRoute will be the same.		 */		public function get fromRoute() : String {			if( !_currentRoute ) return null;			return _currentRoute.location;		}				/**		 * The data that's extracted from the current location.		 * 		 * First time a route is changed this will be null.		 * 		 * @example 		 * 		 * If at route <code>"/page/{pageName}/{pageNumber}/"</code>		 * and the current location is <code>"/page/hello/12/"</code>		 * the <i>fromData</i> will be <code>{ pageName: "hello", pageNumber: 12 }</code> 		 */		public function get fromData() : Object {			if( !_currentRoute ) return null;			return _fromData = _fromData || _currentRoute.extractData( _currentLocation );		}		/**		 * The route that the GOTO call is going to.		 * 		 * NOTE If it's RouteMachine.CHANGED the toRoute		 * 		and fromRoute will be the same.  		 */		public function get toRoute() : String {			return _nextRoute.location;		}		/**		 * The data that's extracted from the goto call.		 * This is the same as in fromData except that this 		 * also contains any arbitrary data passed along		 * with the RouteMachine.GOTO call.		 * 		 * @example 		 * So if we call RouteMachine.GOTO with the body with something like		 * <code>{ pageName: "hello", pageNumber: 12, notInRoute: "other stuff" }</code>		 * the <i>notInRoute</i> variable will only exist in the <i>toData</i>, 		 * not in the <i>fromData</i>.		 * 		 * @see #fromData		 */		public function get toData() : Object {			return _toData = _toData || _nextRoute.extractData( _nextLocation );		}				/**		 * Hidden behind the routes namespace as this is not something		 * that should be used inside the applications, but by RouteMachine		 * "plugins" like the SWFAddressMediator.		 */		routes function get currentRoute() : Route {			return _currentRoute;		}				/**		 * Hidden behind the routes namespace as this is not something		 * that should be used inside the applications, but by RouteMachine		 * "plugins" like the SWFAddressMediator.		 */		routes function get nextRoute() : Route {			return _nextRoute;		}	}}
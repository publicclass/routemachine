package se.publicclass.debug {		import flash.system.Capabilities;			/**	 * @author Robert Sk√∂ld, robert(at)publicclass.se	 */	public class StackTrace {				private static const PARSER : RegExp = /(([\w\d.]+?)::(.+)\(\)(\[(.+):(\d+)\])?)/i;		private var _stackTrace : String = "";		private var _package : String = "";		private var _class : String = "";		private var _function : String = "";		private var _fileName : String = "";		private var _lineNumber : int;		public function StackTrace( stackIndex : int = 2 ) {			if( !Capabilities.isDebugger )				return; 			try {				throw new Error( );			} catch (error : Error) {				_stackTrace = error.getStackTrace( );			}			if( _stackTrace ) {				try {					parse( stackIndex );				} catch( e : Error ) {					trace( e );				}			}		}				private function parse( stackIndex : int ) : void {			var line : String = _stackTrace.split( "\n" )[ stackIndex + 1 ];			if( !line )				return;			var md : Array = line.match( PARSER );			// 2 = package			// 3 = Class/Method			// 5 = Filename			// 6 = Line number 			if( md ) {				_package = md[2] as String;				var classMethod : Array = String( md[3] ).split( "/" );				_class = classMethod[0] as String;				_function = classMethod[1] as String || "constructor";				_fileName = md[5] as String;				_lineNumber = parseInt( md[6] );			}		}		public function get classPath() : String {			return _class + "/" + _function + "()";		}		public function get className() : String {			return _class;		}		public function get packageName() : String {			return _package;		}		public function get methodName() : String {			return _function;		}				public function get fileName() : String {			return _fileName;		}				public function get lineNumber() : int {			return _lineNumber;		}		public function get fullClassPath() : String {			return _package + "::" + _class + "/" + _function + " (" + _lineNumber + ")";		}		public function toString() : String {			return _stackTrace;		}	}}
package se.publicclass.debug.logger {	import se.publicclass.debug.ILogger;	import se.publicclass.debug.Log;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.XMLSocket;	import flash.system.Security;	import flash.utils.getTimer;		/**	 *  	 * @author Robert SkÃ¶ld, robert(at)publicclass.se	 */	public class TrazzleLogger implements ILogger {		private var _buffer : Array = new Array( );		private var _level : int;		private var _socket : XMLSocket;		private var _signatureSent : Boolean = false;		public function TrazzleLogger( host : String = "localhost" , port : uint = 3456 ) {			Security.loadPolicyFile( "xmlsocket://" + host + ":" + port );			_socket = new XMLSocket( );			_socket.addEventListener( Event.CONNECT, onConnect, false, 0, true );			_socket.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onError, false, 0, true );			_socket.addEventListener( IOErrorEvent.IO_ERROR, onError, false, 0, true );			_socket.connect( host, port );			trace( "TrazzleLogger:constructor: host: " + host, "port: " + port );		}		private function onError( event : Event ) : void {			trace( "TrazzleLogger::onError: " + event );		}		private function onConnect( event : Event ) : void {			trace( "TrazzleLogger::onConnect, sending buffer: " + _buffer.length );			while( _buffer.length > 0 ) sendLog( _buffer.shift( ) as Log );		}		public function log( log : Log ) : void {			if( !_socket.connected ) {				_buffer.push( log );			} else {				sendLog( log );			}		}		private function sendLog( log : Log ) : void {			var logMessage : LogMessageVO = new LogMessageVO( log );			sendRawMessage( logMessage.toString( ) );		}				public function sendRawMessage(msg : String) : void {			if (!_signatureSent)				sendSignature( );			_socket.send( msg + '\n' );		}		private function sendSignature() : void {			var startTime : String = (new Date( ).getTime( ) - getTimer( )).toString( );			var xml : XML = <signature language="as3" starttime={startTime}/>;			_socket.send( xml.toXMLString( ) );			_signatureSent = true;		}		public function setLevel( level : int ) : void {			_level = level;		}	}}import se.publicclass.utils.StringUtil;import se.publicclass.debug.Log;import flash.utils.getTimer;internal class LogMessageVO {		// Converts the ErrorLevel levels to Trazzle friendly ones.	private static var LEVELS : Array = [ 		'debug', 		'info', 		'warning', 		'error', 		'fatal',		'none' 	];	public var message : String;	public var encodeHTML : Boolean = true;	public var stacktrace : String;	public var levelName : String;	public var ts : String;	public var stackIndex : uint = 2;	public var methodName : String;	public var className : String;		public function LogMessageVO( log : Log ) {		levelName = '';		message = StringUtil.format(log.messages);		if (message.charAt( 0 ) == '#') {			message = message.substr( 1 );			encodeHTML = false;		}		ts = getTimer( ).toString( );		stacktrace = log.stackTrace.toString();		levelName = LEVELS[ log.level ];	}		public function toString() : String {		var xml : XML = <log level={levelName} line="0" ts={ts} class="unknown" method="unknown" file="unknown" encodehtml={encodeHTML}>				<message>{cdata(message)}</message>				<stacktrace language="as3" index={stackIndex} ignoreToIndex={stackIndex}>					{cdata(stacktrace)}				</stacktrace>			</log>;		return xml.toXMLString( );	}	protected function cdata(str : String) : XML {		var ret : XML;		try {			ret = new XML( "<![CDATA[" + str + "]]>" );		} catch( e : Error ) {			ret = <error msg="Could not create cdata" />;		}		return ret;	}}
package se.publicclass.utils {	/**	 * @author Robert SkÃ¶ld, robert(at)publicclass.se	 */	public class DateUtil {				/**		 * Returns <code>true</code> if is at a certain date.		 * 		 * @param during	The date to check against.		 * @param date		The date which we test. If it's not set the current date is used.		 * 		 * @return			<code>true</code> if <i>date</i> is during <i>during</i>. Otherwise <code>false</code>.		 */		public static function isDuringDate( during : Date , date : Date = null ) : Boolean {			if( !date ) date = new Date();			var start : Date = new Date( during.getFullYear() , during.getMonth() , during.getDate() );			var end : Date = new Date( during.getFullYear() , during.getMonth() , during.getDate() , 23 , 59 );			return date.getTime() >= start.getTime() && date.getTime() <= end.getTime();		}				/**		 * Checks if a date is between two other dates.		 * 		 * @param start 	The starting date.		 * @param end		The end date.		 * @param date		The date to test. If it's not set the current date is used.		 * 		 * @return			<code>true</code> if <i>date</i> is between <i>start</i> and <i>end</i>. Otherwise <code>false</code>.		 */		public static function isBetweenDates( start : Date , end : Date , date : Date = null ) : Boolean {			if( !date ) date = new Date();			start = new Date( start.getFullYear() , start.getMonth() , start.getDate() );			end = new Date( end.getFullYear() , end.getMonth() , end.getDate() , 23 , 59 );			return date.getTime() > start.getTime() && date.getTime() < end.getTime();		}				public static function toUTC( date : Date ) : Date {			return new Date( date.fullYearUTC, date.monthUTC , date.dateUTC , date.hoursUTC , date.minutesUTC , date.secondsUTC , date.millisecondsUTC );		}				/**		 * 8*60*60*1000 = 28800000 = 8 hours in ms		 */		public static function toPST( date : Date ) : Date {			return new Date( toUTC( date ).time - 28800000 ); 		}			}}
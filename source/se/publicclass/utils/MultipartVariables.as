package se.publicclass.utils {	import flash.utils.ByteArray;	import flash.utils.Dictionary;	import flash.utils.Endian;	/**	 * Based on Multipart URL Loader (http://blog.inspirit.ru/?p=139) by Eugene Zatepyakin	 * @author Robert Sk√∂ld, robert(at)publicclass.se	 */	public class MultipartVariables extends ByteArray {		private var _boundary : String;		private var _compatible : Boolean;		private var _fileNames : Array;		private var _files : Dictionary;		private var _variableNames : Array;		private var _variables : Dictionary;		public function MultipartVariables(fileReferenceCompatible : Boolean = false ) {			_compatible = fileReferenceCompatible;			_fileNames = new Array( );			_files = new Dictionary( );			_variableNames = new Array( );			_variables = new Dictionary( );			endian = Endian.BIG_ENDIAN;		}		/**		 * Add string variable to loader		 * If you have already added variable with the same name it will be overwritten		 * 		 * @param	name	Variable name		 * @param	value	Variable value		 */		public function addVariable(name : String, value : Object = '') : void {			if (_variableNames.indexOf( name ) == -1) {				_variableNames.push( name );			}			_variables[name] = value;			 update();		}		/**		 * Add file part to loader		 * If you have already added file with the same fileName it will be overwritten		 * 		 * @param	fileContent	File content encoded to ByteArray		 * @param	fileName	Name of the file		 * @param	dataField	Name of the field containg file data		 * @param	contentType	MIME type of the uploading file		 */				public function addFile(fileContent : ByteArray, fileName : String, dataField : String = 'Filedata', contentType : String = 'application/octet-stream') : void {			if (_fileNames.indexOf( fileName ) == -1) {				_fileNames.push( fileName );				_files[fileName] = new FilePart( fileContent, fileName, dataField, contentType );			} else {				var f : FilePart = _files[fileName] as FilePart;				f.fileContent = fileContent;				f.fileName = fileName;				f.dataField = dataField;				f.contentType = contentType;			}			update();		}				public function get contentType() : String {			return 'multipart/form-data; boundary=' + getBoundary();		}		/**		 * Generate random boundary		 * @return	Random boundary		 */		private function getBoundary() : String {			if( !_boundary ) {				_boundary = '';				for (var i : int = 0; i < 0x20 ; i++ ) {					_boundary += String.fromCharCode( int( 97 + Math.random( ) * 25 ) );				}			}			return _boundary;		}				private function update() : void {			// Reset the bytearray			length = 0; 			position = 0;						writeVariables();			writeFiles();						writeBoundary();			writeDoubleDash();		}				private function writeVariables() : void {			for each(var name:String in _variableNames) {				writeBoundary();				writeLinebreak();				writeString( 'Content-Disposition: form-data; name="' + name + '"' );				writeLinebreak();				writeLinebreak();				writeUTFBytes( _variables[name] );				writeLinebreak();			}		}		private function writeFiles() : void {			if(_fileNames.length) {				for each(var name:String in _fileNames) {					writeFilePartData( _files[name] as FilePart );				}					writeLinebreak();				writeBoundary();				if( _compatible ) {					writeLinebreak();					writeString( 'Content-Disposition: form-data; name="Upload"' );					writeLinebreak();					writeLinebreak();					writeString( 'Submit Query' );					writeLinebreak();				}			}		}		private function writeFilePartData( part : FilePart) : void {			if( _compatible ) {				writeLinebreak();				writeLinebreak();				writeString( 'Content-Disposition: form-data; name="Filename"' );				writeLinebreak();				writeLinebreak();				writeUTFBytes( part.fileName );				writeLinebreak();			}			writeBoundary();			writeLinebreak();			writeString( 'Content-Disposition: form-data; name="' + part.dataField + '"; filename="' );			writeUTFBytes( part.fileName );			writeQuotationMark();			writeLinebreak();			writeString( 'Content-Type: ' + part.contentType );			writeLinebreak();			writeLinebreak();			writeBytes( part.fileContent, 0, part.fileContent.length );			writeLinebreak();		}				private function writeString( str : String ) : void {			var i : int = 0, l : int = str.length;			while( i < l ) {				writeByte( str.charCodeAt( i ) );				i++;			}		}				private function writeLinebreak() : void {			writeShort( 0x0d0a );		}				private function writeQuotationMark() : void {			writeByte( 0x22 );		}				private function writeDoubleDash() : void {			writeShort( 0x2d2d );		}		private function writeBoundary() : void {			writeDoubleDash();			writeString( getBoundary() );		}	}}import flash.utils.ByteArray;internal class FilePart {	public var fileContent : ByteArray;	public var fileName : String;	public var dataField : String;	public var contentType : String;	public function FilePart(fileContent : ByteArray, fileName : String, dataField : String = 'Filedata', contentType : String = 'application/octet-stream') {		this.fileContent = fileContent;		this.fileName = fileName;		this.dataField = dataField;		this.contentType = contentType;	}	public function dispose() : void {		fileContent = null;		fileName = null;		dataField = null;		contentType = null;	}}
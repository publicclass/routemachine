package se.publicclass.utils {	/**	 * Constructs an array from a ranged string.	 * 	 * <code>a..z</code> - a to z inclusively.	 * <code>a...z</code> - a to z exclusively (i.e. a to y).	 * 	 * Example of string: "a..z", "1..55", "-5..5", "z..a" or "1...14"	 * 	 * @author Robert Sk√∂ld, robert(at)publicclass.se	 */	public dynamic class Range extends Array {				private static const PARSER : RegExp = /^([a-z]|-?\d+)(\.\.\.?)([a-z]|-?\d+)$/i;		private var _source : String;		private var _last : String;		private var _first : String;		private var _exclusive : Boolean;		public function Range( source : String ) {			super();			_source = source;			parse();		}				private function parse() : int {			if( !_source )				throw new ArgumentError( "No source found" );							var match : Array = _source.match( PARSER );			if( !match )				throw new ArgumentError( "Invalid format of range" );						_first = String( match[1] );			_exclusive = match[2] == "...";			_last = String( match[3] );						var firstNum : Number = parseInt( _first );			var lastNum : Number = parseInt( _last );			var length : int;				if( !isNaN( firstNum ) && !isNaN( lastNum ) ) {				length = generateNumberRange( firstNum , lastNum );			} else if( isNaN( firstNum ) && isNaN( lastNum ) ) {				length = generateCharRange( _first.charCodeAt() , _last.charCodeAt() );			} else {				throw new Error( "Invalid range, the first and last must be either int or string, not both" );			}			return length;		}		/**		 * Loops from <code>from</code> to <code>to</code> and add it to the		 * range.		 */		private function generateNumberRange( from : int, to : int ) : int {			var change : int = from > to ? -1 : 1;			var current : int = from;			var i : int = 0;			var len : int = Math.abs( to - from );			if( !isExclusive() ) len += 1;			while( i < len ) {				this[ i++ ] = current;				current += change;			}			return len;		}				/**		 * Loops from <code>from</code> to <code>to</code> and add it to the		 * range.		 */		private function generateCharRange( first : Number, last : Number ) : int {			var change : int = first > last ? -1 : 1;			var current : Number = first;			var i : int = 0;			var len : int = Math.abs( last - first );			if( !isExclusive() ) len += 1;			while( i < len ) {				this[ i++ ] = String.fromCharCode( current );				current += change;			}			return len;		}				/**		 * The value which the range starts from.		 */		public function first() : String {			return _first;		}				/**		 * The value which the range starts ends with.		 */		public function last() : String {			return _last;		}				public function within( value : int ) : Boolean {			return parseInt( first() ) > value && value < parseInt( last() );		}				/**		 * Is the last item in the range included in the array?		 */		public function isExclusive() : Boolean {			return _exclusive;		}				/**		 * Is it really a range value?		 */		public static function isRange( str : String ) : Boolean {			return PARSER.test( str );		}	}}
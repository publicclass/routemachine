package se.publicclass.utils {	import flash.text.StyleSheet;	import flash.text.TextFormat;	
	/**	 * @author Robert Sk√∂ld, robert(at)publicclass.se	 */			public class TextUtil {
		/**		 * The default leading to a paragraph.		 */		public static var PARAGRAPH_LEADING : Number = 0;				public static const REGEXP_PARAGRAPH_LEADING : RegExp = /<(p|h\d+)\s*([^>]*)?>.*?<\/\1>/ig;		public static const REGEXP_EXTRACT_CLASS_NAME : RegExp = /class=["']([^"']+)["']/i;		
		/**		 * Because flash doesn't like to go through a TextFormat with a loop, so we have to do it using an array instead.		 * @private		 */		private static const FORMAT_STYLES : Array = [ "align" , "blockIndent" , "bold" , "bullet" , "color" , "display" , "font" , 			"indent" , "italic" , "kerning" , "leading" , "leftMargin" , "letterSpacing" ,			"rightMargin" , "size" , "tabStops" , "target" , "underline" , "url" ];
		private static var _css : StyleSheet;		
		/**		 * Merges two text formats, fmt1 is higher priority than fmt2, so if both the formats has font		 * the fmt1's font will be chosen.		 * 		 * @param fmt1 		The higher prioritized TextFormat		 * @param fmt2 		The lower prioritized TextFormat		 * 		 * @return A combination of fmt1 and fmt2		 */		public static function mergeTextFormats( fmt1 : TextFormat , fmt2 : TextFormat ) : TextFormat {			var format : TextFormat = new TextFormat( );			for each( var style : String in FORMAT_STYLES ) {				if( fmt2[ style ] != null ) format[ style ] = fmt2[ style ];				if( fmt1[ style ] != null ) format[ style ] = fmt1[ style ];			}			return format;		}				public static function toString( format : TextFormat ) : String {			var str : String = "[TextFormat";			for each( var style : String in FORMAT_STYLES ) 				str += " " + style + ":" + format[style];			return str + "]";		}		
		/**		 * Adds leading to each paragraph, with the size of the html tags stylesheet. 		 * If no style was found it applies the default paragraph leading.		 * 		 * @param tf 		The textfield to apply leading to		 * @param html 		The html text		 * 		 * @return 			The new html text with paragraph leadings.		 */		public static function applyParagraphLeading( html : String , css : StyleSheet ) : String {			_css = css || new StyleSheet( );			return html.replace( REGEXP_PARAGRAPH_LEADING , paragraphReplace ); 		}		
		/**		 * Adds a line of textformat with leading.		 * @private		 */		private static function paragraphReplace() : String {			var leading : Number = PARAGRAPH_LEADING;			var tag : String = arguments[ 1 ];			var style : Object = _css.getStyle( tag );			var attributes : String = arguments[ 2 ];			var position : int = arguments[ 3 ];			var md : Array;			var className : String = "";			if( attributes && ( md = attributes.match( REGEXP_EXTRACT_CLASS_NAME ) ) ) {				// Extract the class name and get it's style and merge it with the tags style				className = "." + md[ 1 ];				var classStyle : Object = _css.getStyle( className );				if( classStyle && "paragraphLeading" in classStyle ) {					style = ObjectUtil.merge( style , classStyle );				}			}			if( "paragraphLeading" in style ) {				leading = style[ "paragraphLeading" ];				if( "leading" in style ) {					leading -= style[ "leading" ]; // Remove the regular leading of the paragraph.				}			}//			Debug.trace( "Applying leading (" + leading + ") to " + tag + className );			return arguments[ 0 ] + "<textformat leading='" + leading + "'>\n</textformat>";		}					}}